#include "../../../devices/kunlun/kunlun_common.h"
#include "../../../devices/kunlun/kunlun_kernel_common.h"
#include "kernel.h"
#include "rms_norm_kunlun.h"
#include <memory>
#include <stdint.h>

// Kernel function for computing RMS-norm
template <unsigned int BLOCK_SIZE, typename Tcompute, typename Tdata, typename Tweight>
__global__ void rmsnormKernel(
    Tdata *y,
    int32_t stride_y,
    const Tdata *x,
    int32_t stride_x,
    const Tweight *w,
    uint32_t dim,
    float epsilon) {

    __shared__ Tdata x_sm[SM_SIZE / sizeof(Tdata)];
    __shared__ Tweight w_sm[SM_SIZE / sizeof(Tweight)];
    __shared__ Tdata y_sm[SM_SIZE / sizeof(Tdata)];

    // Copy x and w to shared memory in 0 core
    if (core_id() == 0) {
        GM2SM_ASYNC(x + stride_x * cluster_id(), x_sm, dim * sizeof(Tdata));
        GM2SM_ASYNC(w, w_sm, dim * sizeof(Tweight));
    }
    sync_cluster();

    // Compute RMS-norm in shared memory
    rmsnormBlock<BLOCK_SIZE, Tcompute>(y_sm, x_sm, w_sm, dim, epsilon);

    if (core_id() == 0) {
        SM2GM_ASYNC(y_sm, y + stride_y * cluster_id(), dim * sizeof(Tdata));
    }
    sync_cluster();
}

// Instantiate the kernel for different data types and block sizes
INSTANTIATE_RMSNORM_KERNEL(64, float, float, float);
INSTANTIATE_RMSNORM_KERNEL(64, float, bfloat16_t, float);
INSTANTIATE_RMSNORM_KERNEL(64, float, bfloat16_t, bfloat16_t);
INSTANTIATE_RMSNORM_KERNEL(64, float, half, float);
INSTANTIATE_RMSNORM_KERNEL(64, float, half, half);

namespace op::rms_norm::kunlun {

struct Descriptor::Opaque {
    std::shared_ptr<device::kunlun::Handle::Internal> internal;
};

Descriptor::~Descriptor() {
    delete _opaque;
}

infiniStatus_t Descriptor::create(
    infiniopHandle_t handle,
    Descriptor **desc_ptr,
    infiniopTensorDescriptor_t y_desc,
    infiniopTensorDescriptor_t x_desc,
    infiniopTensorDescriptor_t w_desc,
    float epsilon) {
    auto result = RMSNormInfo::create(y_desc, x_desc, w_desc, epsilon);
    CHECK_RESULT(result);
    auto info = result.take();

    if (info.x_strides[1] != 1 || info.y_strides[1] != 1) {
        return INFINI_STATUS_BAD_TENSOR_STRIDES;
    }
    if (info.ndim() != 2) {
        return INFINI_STATUS_BAD_TENSOR_SHAPE;
    }

    *desc_ptr = new Descriptor(
        new Descriptor::Opaque{static_cast<device::kunlun::Handle *>(handle)->internal()},
        info,
        0,
        handle->device,
        handle->device_id);
    return INFINI_STATUS_SUCCESS;
}

template <unsigned int BLOCK_SIZE>
infiniStatus_t launchKernel(
    uint32_t batch_size, uint32_t dim,
    void *y, infiniDtype_t atype, ptrdiff_t stride_y,
    const void *x, ptrdiff_t stride_x,
    const void *w, infiniDtype_t wtype,
    float epsilon,
    kunlunStream_t stream) {

#define LAUNCH_KERNEL(Tdata, Tweight, Tcompute)                                              \
    rmsnormKernel<BLOCK_SIZE, Tcompute, Tdata, Tweight><<<batch_size, BLOCK_SIZE, stream>>>( \
        static_cast<Tdata *>(y), stride_y,                                                   \
        static_cast<const Tdata *>(x), stride_x,                                             \
        static_cast<const Tweight *>(w), dim, epsilon);

    if (atype == INFINI_DTYPE_F16 && wtype == INFINI_DTYPE_F16) {
        LAUNCH_KERNEL(half, half, float);
    } else if (atype == INFINI_DTYPE_F16 && wtype == INFINI_DTYPE_F32) {
        LAUNCH_KERNEL(half, float, float);
    } else if (atype == INFINI_DTYPE_BF16 && wtype == INFINI_DTYPE_BF16) {
        LAUNCH_KERNEL(bfloat16_t, bfloat16_t, float);
    } else if (atype == INFINI_DTYPE_BF16 && wtype == INFINI_DTYPE_F32) {
        LAUNCH_KERNEL(bfloat16_t, float, float);
    } else if (atype == INFINI_DTYPE_F32 && wtype == INFINI_DTYPE_F32) {
        LAUNCH_KERNEL(float, float, float);
    } else {
        return INFINI_STATUS_BAD_TENSOR_DTYPE;
    }

#undef LAUNCH_KERNEL

    return INFINI_STATUS_SUCCESS;
}

infiniStatus_t Descriptor::calculate(
    void *workspace, size_t workspace_size,
    void *y, const void *x, const void *w,
    void *stream) const {

    if (workspace_size < _workspace_size) {
        return INFINI_STATUS_INSUFFICIENT_WORKSPACE;
    }

    auto stride_x = static_cast<int32_t>(_info.x_strides[0]);
    auto stride_y = static_cast<int32_t>(_info.y_strides[0]);
    auto dim = static_cast<uint32_t>(_info.dim());
    uint32_t batch_size = static_cast<uint32_t>(_info.shape[0]);

    // launch kernel with different block sizes
    CHECK_STATUS(launchKernel<64>(batch_size, dim, y, _info.atype, stride_y, x, stride_x, w, _info.wtype, _info.epsilon, stream));

    return INFINI_STATUS_SUCCESS;
}

} // namespace op::rms_norm::kunlun
